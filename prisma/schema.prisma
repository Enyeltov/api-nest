generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Addresses {
  id        Int       @id @default(autoincrement())
  cityId    Int
  street    String?   @db.VarChar(255)
  residence String?   @db.VarChar(255)
  GPS       String?   @db.VarChar(255)
  Cities    Cities    @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Persons   Persons[]
}

model Agents {
  id              Int               @id @default(autoincrement())
  personId        Int
  AgenciesId      Int?
  Agencies        Agencies?         @relation(fields: [AgenciesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Persons         Persons           @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  AgentContracts  AgentContracts[]
  ClientHasAgents ClientHasAgents[]
}

model ClientHasAgents {
  id       Int      @id @default(autoincrement())
  clientId Int?
  agentId  Int?
  Agents   Agents?  @relation(fields: [agentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Clients  Clients? @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ClientHasTaker {
  id                  Int                 @id @default(autoincrement())
  clientPolizaId      Int?
  ClientHasPolicies   ClientHasPolicies? @relation(fields: [clientPolizaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PolicyDetails       PolicyDetails[]
}

model Clients {
  id                Int               @id @default(autoincrement())
  personId          Int
  civilPolicyStatus String?           @db.VarChar(255)
  company           String?           @db.VarChar(255)
  ocupation         String?           @db.VarChar(255)
  Persons           Persons           @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ClientHasAgents   ClientHasAgents[]
  ClientHasPolicies ClientHasPolicies[]
}

model Configs {
  id    Int    @id @default(autoincrement())
  key   String @db.VarChar(255)
  value String @db.VarChar(255)
}

model Currencies {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  symbol        String         @db.VarChar(255)
  PolicyDetails PolicyDetails[]
}

model InsuranceCarriers {
  id          Int        @id @default(autoincrement())
  document    Int?
  name        String?    @db.VarChar(255)
  phone       String?    @db.VarChar(255)
  email       String?    @db.VarChar(255)
  account     String?    @db.VarChar(255)
  paymentLink String?    @db.VarChar(255)
  Policies    Policies[]
}

model PolicyDetails {
  id                    Int               @id @default(autoincrement())
  ClientHasTomadorId    Int
  periodicityId         Int
  primeValue            Float?
  AnnexValue            Float?
  comission             Float?
  comissionPolicyStatus Boolean?
  ValorFinalizacion     Float?
  Total                 Float?
  currencyId            Int
  ClientHasTaker        ClientHasTaker @relation(fields: [ClientHasTomadorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Currencies            Currencies        @relation(fields: [currencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Periodicities         Periodicities     @relation(fields: [periodicityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Payments              Payments[]
  Taxes                 Taxes[]
}

model Patrimonials {
  id             Int      @id @default(autoincrement())
  policyId       Int
  type           String   @db.VarChar(255)
  totalValue     Float?
  machineryValue Float?
  furnitureValue Float?
  Policies       Policies @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Payments {
  id             Int          @id @default(autoincrement())
  policyDetailsId Int
  receiptNumber  Float?
  paymentValue   Float?
  paymentDate    DateTime?    @db.Date
  comissionDate  DateTime?    @db.Date
  PolicyDetails   PolicyDetails @relation(fields: [policyDetailsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Periods {
  id        Int       @id @default(autoincrement())
  policyId  Int?
  startDate DateTime  @db.Date
  endDate   DateTime  @db.Date
  renewal   Int?
  Policies  Policies? @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Persons {
  id             Int            @id @default(autoincrement())
  documentTypeId Int?
  document       Int?
  AddressId      Int?
  gender         String?
  name           String         @db.VarChar(255)
  lastName       String         @db.VarChar(255)
  birthDate      DateTime?      @db.Date
  phone          String?        @db.VarChar(255)
  email          String         @unique @db.VarChar(255)
  Addresses      Addresses?     @relation(fields: [AddressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  DocumentTypes  DocumentTypes? @relation(fields: [documentTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Agents         Agents[]
  Clients        Clients[]
  Users          Users?
}

model PolicyStatus {
  id               Int        @id @default(autoincrement())
  description      String?    @db.VarChar(255)
  policystatusName String     @db.VarChar(255)
  Policies         Policies[]
}

model RelationPolicyStatus {
  id                 Int                  @id @default(autoincrement())
  relationName       String               @db.VarChar(255)
  ClientHasPolicies  ClientHasPolicies[]
}

model Travels {
  id                                        Int       @id @default(autoincrement())
  startCountry                              Int
  endCountry                                Int
  policyId                                  Int
  startDate                                 DateTime  @db.Date
  endDate                                   DateTime  @db.Date
  Countries_CountriesToTravels_endCountry   Countries @relation("CountriesToTravels_endCountry", fields: [endCountry], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Policies                                  Policies  @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Countries_CountriesToTravels_startCountry Countries @relation("CountriesToTravels_startCountry", fields: [startCountry], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Users {
  id             Int        @id @default(autoincrement())
  userRole       userroles?
  hashedPassword String
  Persons        Persons    @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Vehicles {
  id           Int      @id @default(autoincrement())
  policyId     Int
  brand        String   @db.VarChar(255)
  class        String?  @db.VarChar(255)
  model        String?  @db.VarChar(255)
  vehicleType  String?  @db.VarChar(255)
  serviceType  String?  @db.VarChar(255)
  gasConverted String?  @db.VarChar(255)
  vehicleAge   Int?
  Policies     Policies @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model BranchTypes {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  Policies   Policies[]
  SubBranchs SubBranchs[]
}

model Continents {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(255)
  Countries Countries[]
}

model CountryStates {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  countryId Int
  Countries Countries @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Cities    Cities[]
}

model SubBranchs {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(255)
  branchTypeId Int?
  BranchTypes  BranchTypes? @relation(fields: [branchTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Policies     Policies[]
}

model Taxes {
  id             Int          @id @default(autoincrement())
  PolicyDetailsId Int
  metakey        String       @db.VarChar(255)
  metavalue      String       @db.VarChar(255)
  PolicyDetails   PolicyDetails @relation(fields: [PolicyDetailsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Agencies {
  id       Int      @id @default(autoincrement())
  document Int?
  name     String?  @db.VarChar(255)
  phone    String?  @db.VarChar(255)
  email    String?  @db.VarChar(255)
  Agents   Agents[]
}

model Cities {
  id             Int           @id @default(autoincrement())
  name           String        @db.VarChar(255)
  countryStateId Int
  CountryStates  CountryStates @relation(fields: [countryStateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Addresses      Addresses[]
}

model Countries {
  id                                      Int             @id @default(autoincrement())
  continentId                             Int
  countryName                             String          @db.VarChar(255)
  Continents                              Continents      @relation(fields: [continentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  CountryStates                           CountryStates[]
  Travels_CountriesToTravels_endCountry   Travels[]       @relation("CountriesToTravels_endCountry")
  Travels_CountriesToTravels_startCountry Travels[]       @relation("CountriesToTravels_startCountry")
}

model DocumentTypes {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(255)
  Persons Persons[]
}

model Periodicities {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  PolicyDetails PolicyDetails[]
}

model Policies {
  id                 Int                  @id @default(autoincrement())
  InsuranceCarrierId Int
  policyNum          Float
  policyStatusId     Int
  Risk               String               @db.VarChar(255)
  branchTypeId       Int
  subBranchId        Int
  insuredValue       Float?
  Renovable          Boolean
  InsuranceCarriers  InsuranceCarriers    @relation(fields: [InsuranceCarrierId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  BranchTypes        BranchTypes          @relation(fields: [branchTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PolicyStatus       PolicyStatus         @relation(fields: [policyStatusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  SubBranchs         SubBranchs           @relation(fields: [subBranchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  AgentContracts     AgentContracts[]
  ClientHasPolicies  ClientHasPolicies[]
  Patrimonials       Patrimonials[]
  Periods            Periods[]
  Travels            Travels[]
  Vehicles           Vehicles[]
}

model AgentContracts {
  id       Int       @id @default(autoincrement())
  policyId Int?
  agentId  Int?
  Agents   Agents?   @relation(fields: [agentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Policies Policies? @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ClientHasPolicies {
  id                   Int                   @id @default(autoincrement())
  policyId             Int?
  clientId             Int?
  relationId           Int?
  Policies             Policies?             @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  RelationPolicyStatus RelationPolicyStatus? @relation(fields: [relationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Clients              Clients?              @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ClientHasTaker       ClientHasTaker[]
}

enum userroles {
  admin
  digitalizer
  dummy
}
